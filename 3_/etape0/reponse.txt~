Q6 ) reconnais le token skip , et s'il est reconnu crrer un noeud de type OPER_SKIP.

Q7) permet de faire un parsing recursif sur les instruction
	une liste d'instruction est composer d'une autre liste d'instruction et d'une instruction , et crée un noeud entre la liste d'instruction restante a 
parcourir et l'instruction 

Q8) permet de reconnaitre quand la liste d'instruction n'a qu'une seul instruction

Q9) syntaxiquement logique : oui , la syntaxe est juste 
	 sementiquement logique : OUi , la semnetique aussi car le type attendu ( voir partie 1 ) et de type node ,et ici le retour $$ = $2 est bien de type node , alors que $1 et $3 sont de type token donc faux ...

10) permet de lister les type attendu , fonctionne comme une union en C


11) le %type permet de specifier le type attendu pour chaque token ou composante de la grammaire .
	example : pour le token T_NUMERIC le type est le méme que celui de f qui est un float 
pour le champ instruction le type attendu est un noeud
(en gros permet de faire la lisaison avec les type dans l'union

12) il defini la forme ou structure du code ,
	on commence avec le token PROGRAM puis le nom du code fini par un ;
	puis on a le bloc principal fini par un .

la structure du bloc principal etant definis plus bas dans la liste des ordres.
et affiche la valeur du pointeur sur le programme principal 

13) partie 1 : 
	- declarations et inclusion bibli C 
	- declarations yacc ( token )
	- fonctions erreurs de syntaxe 
	- la declaration des type attendu avec UNION
	- definition des liaison entre les token et ordre avec les differents types du ll'union

14) la partie 3:
 - l'implementation des fonction declaré dans la partie 1 et le main


16) partie 1 : 01 a 08
	 partie 2 : 08 a 33
	 partie 3 : 33 a ..

17) il attribue a chaque mot clés un token

18) [a-zA-Z][a-zA-Z0-9_]* : expression reguliere qui veut dire : commence par une lettre maj et min, suivie par une lettre maj ou min ou un chiffre ou un _ avec recurence de 0 a l'infini 

{}
copie la chaine de charactere qui correspon au mot et la met dans la veriable s (de type char*) grace a la fonction yylval
retourne le token qui correspond au type recconu
(retourne un entier qui correspond a la valeur des token crée dans notre vocabulaire )

19 ) [0-9]* : expression reguliere pour reconnaitre un nombre entier avec une recurence infini de chifre entre 0 et 9 
on transforme la chaine de char en entier 

20)partie 3 : appelle de fonctions
